/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IPriceOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPriceFeed"
      | "dataFeeds"
      | "exist"
      | "getAssetPriceInUsd"
      | "getAssetPriceRelativeTo"
      | "removePriceFeed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPriceFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dataFeeds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "exist", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getAssetPriceInUsd",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetPriceRelativeTo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removePriceFeed",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataFeeds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPriceInUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPriceRelativeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePriceFeed",
    data: BytesLike
  ): Result;
}

export interface IPriceOracle extends BaseContract {
  connect(runner?: ContractRunner | null): IPriceOracle;
  waitForDeployment(): Promise<this>;

  interface: IPriceOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPriceFeed: TypedContractMethod<
    [token: AddressLike, priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  dataFeeds: TypedContractMethod<[token: AddressLike], [string], "view">;

  exist: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  getAssetPriceInUsd: TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { price: bigint; decimals: bigint }],
    "view"
  >;

  getAssetPriceRelativeTo: TypedContractMethod<
    [token: AddressLike, relativeTo: AddressLike],
    [[bigint, bigint] & { price: bigint; decimals: bigint }],
    "view"
  >;

  removePriceFeed: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPriceFeed"
  ): TypedContractMethod<
    [token: AddressLike, priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dataFeeds"
  ): TypedContractMethod<[token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "exist"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAssetPriceInUsd"
  ): TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { price: bigint; decimals: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAssetPriceRelativeTo"
  ): TypedContractMethod<
    [token: AddressLike, relativeTo: AddressLike],
    [[bigint, bigint] & { price: bigint; decimals: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "removePriceFeed"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  filters: {};
}
