/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StdChains {
  export type ChainStruct = {
    name: string;
    chainId: BigNumberish;
    chainAlias: string;
    rpcUrl: string;
  };

  export type ChainStructOutput = [
    name: string,
    chainId: bigint,
    chainAlias: string,
    rpcUrl: string
  ] & { name: string; chainId: bigint; chainAlias: string; rpcUrl: string };
}

export interface DeployLiquisafeScriptInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "IS_SCRIPT"
      | "btcToken"
      | "deployments"
      | "findChainName"
      | "getChain"
      | "linkToken"
      | "liquisafe"
      | "priceOracle"
      | "proxyAdmin"
      | "run"
      | "uniswapV2Factory"
      | "uniswapV2Router"
      | "uniswapV3Factory"
      | "uniswapV3PositionManager"
      | "usdcToken"
      | "wEth"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(functionFragment: "btcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findChainName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getChain", values?: undefined): string;
  encodeFunctionData(functionFragment: "linkToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "liquisafe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "run", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3PositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "wEth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findChainName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "linkToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquisafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxyAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "run", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3PositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wEth", data: BytesLike): Result;
}

export interface DeployLiquisafeScript extends BaseContract {
  connect(runner?: ContractRunner | null): DeployLiquisafeScript;
  waitForDeployment(): Promise<this>;

  interface: DeployLiquisafeScriptInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  IS_SCRIPT: TypedContractMethod<[], [boolean], "view">;

  btcToken: TypedContractMethod<[], [string], "view">;

  deployments: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { name: string; addr: string }],
    "view"
  >;

  findChainName: TypedContractMethod<[], [string], "nonpayable">;

  getChain: TypedContractMethod<
    [],
    [StdChains.ChainStructOutput],
    "nonpayable"
  >;

  linkToken: TypedContractMethod<[], [string], "view">;

  liquisafe: TypedContractMethod<[], [string], "view">;

  priceOracle: TypedContractMethod<[], [string], "view">;

  proxyAdmin: TypedContractMethod<[], [string], "view">;

  run: TypedContractMethod<[], [void], "nonpayable">;

  uniswapV2Factory: TypedContractMethod<[], [string], "view">;

  uniswapV2Router: TypedContractMethod<[], [string], "view">;

  uniswapV3Factory: TypedContractMethod<[], [string], "view">;

  uniswapV3PositionManager: TypedContractMethod<[], [string], "view">;

  usdcToken: TypedContractMethod<[], [string], "view">;

  wEth: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "IS_SCRIPT"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "btcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deployments"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { name: string; addr: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "findChainName"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getChain"
  ): TypedContractMethod<[], [StdChains.ChainStructOutput], "nonpayable">;
  getFunction(
    nameOrSignature: "linkToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "liquisafe"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxyAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "run"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV2Factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV2Router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV3Factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV3PositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wEth"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
