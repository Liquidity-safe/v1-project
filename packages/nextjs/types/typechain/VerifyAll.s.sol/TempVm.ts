/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type FfiResultStruct = {
  exit_code: BigNumberish;
  stdout: BytesLike;
  stderr: BytesLike;
};

export type FfiResultStructOutput = [
  exit_code: bigint,
  stdout: string,
  stderr: string
] & { exit_code: bigint; stdout: string; stderr: string };

export interface TempVmInterface extends Interface {
  getFunction(nameOrSignature: "tryFfi"): FunctionFragment;

  encodeFunctionData(functionFragment: "tryFfi", values: [string[]]): string;

  decodeFunctionResult(functionFragment: "tryFfi", data: BytesLike): Result;
}

export interface TempVm extends BaseContract {
  connect(runner?: ContractRunner | null): TempVm;
  waitForDeployment(): Promise<this>;

  interface: TempVmInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  tryFfi: TypedContractMethod<
    [arg0: string[]],
    [FfiResultStructOutput],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "tryFfi"
  ): TypedContractMethod<
    [arg0: string[]],
    [FfiResultStructOutput],
    "nonpayable"
  >;

  filters: {};
}
