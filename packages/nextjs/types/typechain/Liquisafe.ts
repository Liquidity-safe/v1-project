/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Liquisafe {
  export type OrderStruct = {
    orderStatus: BigNumberish;
    orderType: BigNumberish;
    orderRole: BigNumberish;
    owner: AddressLike;
    receiver: AddressLike;
    pool: AddressLike;
    positionManager: AddressLike;
    token0: AddressLike;
    token1: AddressLike;
    positionId: BigNumberish;
    amountLiquidity: BigNumberish;
    minAmountToken0Usd: BigNumberish;
    minAmountToken1Usd: BigNumberish;
  };

  export type OrderStructOutput = [
    orderStatus: bigint,
    orderType: bigint,
    orderRole: bigint,
    owner: string,
    receiver: string,
    pool: string,
    positionManager: string,
    token0: string,
    token1: string,
    positionId: bigint,
    amountLiquidity: bigint,
    minAmountToken0Usd: bigint,
    minAmountToken1Usd: bigint
  ] & {
    orderStatus: bigint;
    orderType: bigint;
    orderRole: bigint;
    owner: string;
    receiver: string;
    pool: string;
    positionManager: string;
    token0: string;
    token1: string;
    positionId: bigint;
    amountLiquidity: bigint;
    minAmountToken0Usd: bigint;
    minAmountToken1Usd: bigint;
  };
}

export interface LiquisafeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONTROLLER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "WETH"
      | "addOrderV2"
      | "addOrderV3"
      | "allOrders"
      | "authorizedFactories"
      | "canExecuteOrder"
      | "cancelOrder"
      | "countOrders"
      | "decimalsUsd"
      | "executeOrders"
      | "fetchPageOrders"
      | "getExecutableOrders"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "nonFungiblePositionManagers"
      | "onERC721Received"
      | "priceOracle"
      | "removeNonfungiblePositionManager"
      | "renounceRole"
      | "revokeRole"
      | "setFactory"
      | "setNonfungiblePositionManager"
      | "supportsInterface"
      | "updatePriceOracle"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Add"
      | "Executed"
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONTROLLER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addOrderV2",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addOrderV3",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedFactories",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecuteOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "countOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimalsUsd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPageOrders",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutableOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nonFungiblePositionManagers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeNonfungiblePositionManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonfungiblePositionManager",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceOracle",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTROLLER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addOrderV2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addOrderV3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedFactories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canExecuteOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decimalsUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchPageOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutableOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonFungiblePositionManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeNonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceOracle",
    data: BytesLike
  ): Result;
}

export namespace AddEvent {
  export type InputTuple = [
    sender: AddressLike,
    receiver: AddressLike,
    orderIndex: BigNumberish,
    order: Liquisafe.OrderStruct
  ];
  export type OutputTuple = [
    sender: string,
    receiver: string,
    orderIndex: bigint,
    order: Liquisafe.OrderStructOutput
  ];
  export interface OutputObject {
    sender: string;
    receiver: string;
    orderIndex: bigint;
    order: Liquisafe.OrderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutedEvent {
  export type InputTuple = [
    sender: AddressLike,
    orderIndex: BigNumberish,
    order: Liquisafe.OrderStruct
  ];
  export type OutputTuple = [
    sender: string,
    orderIndex: bigint,
    order: Liquisafe.OrderStructOutput
  ];
  export interface OutputObject {
    sender: string;
    orderIndex: bigint;
    order: Liquisafe.OrderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Liquisafe extends BaseContract {
  connect(runner?: ContractRunner | null): Liquisafe;
  waitForDeployment(): Promise<this>;

  interface: LiquisafeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONTROLLER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  addOrderV2: TypedContractMethod<
    [
      orderRole: BigNumberish,
      receiver: AddressLike,
      factory: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amountLiquidity: BigNumberish,
      minAmountToken0Usd: BigNumberish,
      minAmountToken1Usd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addOrderV3: TypedContractMethod<
    [
      orderRole: BigNumberish,
      receiver: AddressLike,
      factory: AddressLike,
      tokenId: BigNumberish,
      amountLiquidity: BigNumberish,
      minAmountToken0Usd: BigNumberish,
      minAmountToken1Usd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  allOrders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        orderStatus: bigint;
        orderType: bigint;
        orderRole: bigint;
        owner: string;
        receiver: string;
        pool: string;
        positionManager: string;
        token0: string;
        token1: string;
        positionId: bigint;
        amountLiquidity: bigint;
        minAmountToken0Usd: bigint;
        minAmountToken1Usd: bigint;
      }
    ],
    "view"
  >;

  authorizedFactories: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  canExecuteOrder: TypedContractMethod<
    [index: BigNumberish],
    [boolean],
    "view"
  >;

  cancelOrder: TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;

  countOrders: TypedContractMethod<[], [bigint], "view">;

  decimalsUsd: TypedContractMethod<[], [bigint], "view">;

  executeOrders: TypedContractMethod<
    [orderIndexes: BigNumberish[]],
    [boolean[]],
    "nonpayable"
  >;

  fetchPageOrders: TypedContractMethod<
    [cursor: BigNumberish, howMany: BigNumberish],
    [
      [Liquisafe.OrderStructOutput[], bigint] & {
        values: Liquisafe.OrderStructOutput[];
        newCursor: bigint;
      }
    ],
    "view"
  >;

  getExecutableOrders: TypedContractMethod<
    [orderIndexes: BigNumberish[]],
    [boolean[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_priceOracle: AddressLike, _WETH: AddressLike],
    [void],
    "nonpayable"
  >;

  nonFungiblePositionManagers: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  priceOracle: TypedContractMethod<[], [string], "view">;

  removeNonfungiblePositionManager: TypedContractMethod<
    [factory: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setFactory: TypedContractMethod<
    [factory: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  setNonfungiblePositionManager: TypedContractMethod<
    [factory: AddressLike, nonfungiblePositionManager: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updatePriceOracle: TypedContractMethod<
    [_priceOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONTROLLER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addOrderV2"
  ): TypedContractMethod<
    [
      orderRole: BigNumberish,
      receiver: AddressLike,
      factory: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amountLiquidity: BigNumberish,
      minAmountToken0Usd: BigNumberish,
      minAmountToken1Usd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addOrderV3"
  ): TypedContractMethod<
    [
      orderRole: BigNumberish,
      receiver: AddressLike,
      factory: AddressLike,
      tokenId: BigNumberish,
      amountLiquidity: BigNumberish,
      minAmountToken0Usd: BigNumberish,
      minAmountToken1Usd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allOrders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        orderStatus: bigint;
        orderType: bigint;
        orderRole: bigint;
        owner: string;
        receiver: string;
        pool: string;
        positionManager: string;
        token0: string;
        token1: string;
        positionId: bigint;
        amountLiquidity: bigint;
        minAmountToken0Usd: bigint;
        minAmountToken1Usd: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "authorizedFactories"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canExecuteOrder"
  ): TypedContractMethod<[index: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "countOrders"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimalsUsd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeOrders"
  ): TypedContractMethod<
    [orderIndexes: BigNumberish[]],
    [boolean[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fetchPageOrders"
  ): TypedContractMethod<
    [cursor: BigNumberish, howMany: BigNumberish],
    [
      [Liquisafe.OrderStructOutput[], bigint] & {
        values: Liquisafe.OrderStructOutput[];
        newCursor: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExecutableOrders"
  ): TypedContractMethod<[orderIndexes: BigNumberish[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_priceOracle: AddressLike, _WETH: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nonFungiblePositionManagers"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeNonfungiblePositionManager"
  ): TypedContractMethod<[factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFactory"
  ): TypedContractMethod<
    [factory: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNonfungiblePositionManager"
  ): TypedContractMethod<
    [factory: AddressLike, nonfungiblePositionManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updatePriceOracle"
  ): TypedContractMethod<[_priceOracle: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Add"
  ): TypedContractEvent<
    AddEvent.InputTuple,
    AddEvent.OutputTuple,
    AddEvent.OutputObject
  >;
  getEvent(
    key: "Executed"
  ): TypedContractEvent<
    ExecutedEvent.InputTuple,
    ExecutedEvent.OutputTuple,
    ExecutedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "Add(address,address,uint256,tuple)": TypedContractEvent<
      AddEvent.InputTuple,
      AddEvent.OutputTuple,
      AddEvent.OutputObject
    >;
    Add: TypedContractEvent<
      AddEvent.InputTuple,
      AddEvent.OutputTuple,
      AddEvent.OutputObject
    >;

    "Executed(address,uint256,tuple)": TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;
    Executed: TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
