// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Add extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Add entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Add must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Add", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Add | null {
    return changetype<Add | null>(store.get_in_block("Add", id.toHexString()));
  }

  static load(id: Bytes): Add | null {
    return changetype<Add | null>(store.get("Add", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get orderIndex(): BigInt {
    let value = this.get("orderIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set orderIndex(value: BigInt) {
    this.set("orderIndex", Value.fromBigInt(value));
  }

  get order_orderStatus(): i32 {
    let value = this.get("order_orderStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set order_orderStatus(value: i32) {
    this.set("order_orderStatus", Value.fromI32(value));
  }

  get order_orderType(): i32 {
    let value = this.get("order_orderType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set order_orderType(value: i32) {
    this.set("order_orderType", Value.fromI32(value));
  }

  get order_orderRole(): i32 {
    let value = this.get("order_orderRole");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set order_orderRole(value: i32) {
    this.set("order_orderRole", Value.fromI32(value));
  }

  get order_owner(): Bytes {
    let value = this.get("order_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set order_owner(value: Bytes) {
    this.set("order_owner", Value.fromBytes(value));
  }

  get order_receiver(): Bytes {
    let value = this.get("order_receiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set order_receiver(value: Bytes) {
    this.set("order_receiver", Value.fromBytes(value));
  }

  get order_pool(): Bytes {
    let value = this.get("order_pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set order_pool(value: Bytes) {
    this.set("order_pool", Value.fromBytes(value));
  }

  get order_positionManager(): Bytes {
    let value = this.get("order_positionManager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set order_positionManager(value: Bytes) {
    this.set("order_positionManager", Value.fromBytes(value));
  }

  get order_token0(): Bytes {
    let value = this.get("order_token0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set order_token0(value: Bytes) {
    this.set("order_token0", Value.fromBytes(value));
  }

  get order_token1(): Bytes {
    let value = this.get("order_token1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set order_token1(value: Bytes) {
    this.set("order_token1", Value.fromBytes(value));
  }

  get order_positionId(): BigInt {
    let value = this.get("order_positionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set order_positionId(value: BigInt) {
    this.set("order_positionId", Value.fromBigInt(value));
  }

  get order_amountLiquidity(): BigInt {
    let value = this.get("order_amountLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set order_amountLiquidity(value: BigInt) {
    this.set("order_amountLiquidity", Value.fromBigInt(value));
  }

  get order_minAmountToken0Usd(): BigInt {
    let value = this.get("order_minAmountToken0Usd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set order_minAmountToken0Usd(value: BigInt) {
    this.set("order_minAmountToken0Usd", Value.fromBigInt(value));
  }

  get order_minAmountToken1Usd(): BigInt {
    let value = this.get("order_minAmountToken1Usd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set order_minAmountToken1Usd(value: BigInt) {
    this.set("order_minAmountToken1Usd", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Executed extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Executed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Executed must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Executed", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Executed | null {
    return changetype<Executed | null>(
      store.get_in_block("Executed", id.toHexString())
    );
  }

  static load(id: Bytes): Executed | null {
    return changetype<Executed | null>(store.get("Executed", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get orderIndex(): BigInt {
    let value = this.get("orderIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set orderIndex(value: BigInt) {
    this.set("orderIndex", Value.fromBigInt(value));
  }

  get order_orderStatus(): i32 {
    let value = this.get("order_orderStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set order_orderStatus(value: i32) {
    this.set("order_orderStatus", Value.fromI32(value));
  }

  get order_orderType(): i32 {
    let value = this.get("order_orderType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set order_orderType(value: i32) {
    this.set("order_orderType", Value.fromI32(value));
  }

  get order_orderRole(): i32 {
    let value = this.get("order_orderRole");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set order_orderRole(value: i32) {
    this.set("order_orderRole", Value.fromI32(value));
  }

  get order_owner(): Bytes {
    let value = this.get("order_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set order_owner(value: Bytes) {
    this.set("order_owner", Value.fromBytes(value));
  }

  get order_receiver(): Bytes {
    let value = this.get("order_receiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set order_receiver(value: Bytes) {
    this.set("order_receiver", Value.fromBytes(value));
  }

  get order_pool(): Bytes {
    let value = this.get("order_pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set order_pool(value: Bytes) {
    this.set("order_pool", Value.fromBytes(value));
  }

  get order_positionManager(): Bytes {
    let value = this.get("order_positionManager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set order_positionManager(value: Bytes) {
    this.set("order_positionManager", Value.fromBytes(value));
  }

  get order_token0(): Bytes {
    let value = this.get("order_token0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set order_token0(value: Bytes) {
    this.set("order_token0", Value.fromBytes(value));
  }

  get order_token1(): Bytes {
    let value = this.get("order_token1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set order_token1(value: Bytes) {
    this.set("order_token1", Value.fromBytes(value));
  }

  get order_positionId(): BigInt {
    let value = this.get("order_positionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set order_positionId(value: BigInt) {
    this.set("order_positionId", Value.fromBigInt(value));
  }

  get order_amountLiquidity(): BigInt {
    let value = this.get("order_amountLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set order_amountLiquidity(value: BigInt) {
    this.set("order_amountLiquidity", Value.fromBigInt(value));
  }

  get order_minAmountToken0Usd(): BigInt {
    let value = this.get("order_minAmountToken0Usd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set order_minAmountToken0Usd(value: BigInt) {
    this.set("order_minAmountToken0Usd", Value.fromBigInt(value));
  }

  get order_minAmountToken1Usd(): BigInt {
    let value = this.get("order_minAmountToken1Usd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set order_minAmountToken1Usd(value: BigInt) {
    this.set("order_minAmountToken1Usd", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EpnsNotificationCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EpnsNotificationCounter entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EpnsNotificationCounter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EpnsNotificationCounter", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EpnsNotificationCounter | null {
    return changetype<EpnsNotificationCounter | null>(
      store.get_in_block("EpnsNotificationCounter", id)
    );
  }

  static load(id: string): EpnsNotificationCounter | null {
    return changetype<EpnsNotificationCounter | null>(
      store.get("EpnsNotificationCounter", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): BigInt {
    let value = this.get("totalCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCount(value: BigInt) {
    this.set("totalCount", Value.fromBigInt(value));
  }
}

export class EpnsPushNotification extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EpnsPushNotification entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EpnsPushNotification must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EpnsPushNotification", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EpnsPushNotification | null {
    return changetype<EpnsPushNotification | null>(
      store.get_in_block("EpnsPushNotification", id)
    );
  }

  static load(id: string): EpnsPushNotification | null {
    return changetype<EpnsPushNotification | null>(
      store.get("EpnsPushNotification", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get notificationNumber(): BigInt {
    let value = this.get("notificationNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set notificationNumber(value: BigInt) {
    this.set("notificationNumber", Value.fromBigInt(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get notification(): string {
    let value = this.get("notification");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set notification(value: string) {
    this.set("notification", Value.fromString(value));
  }
}
